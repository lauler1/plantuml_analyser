from dataclasses import dataclass, fieldfrom plantuml.plantuml_activity import do_plantuml_activityfrom plantuml.plantuml_sequence import do_plantuml_sequencefrom plantuml.plantuml_architecture import do_plantuml_architecture, introspect_class, introspect_objectfrom plantuml.redirect_output_to_file import redirect_output_to_filefrom plantuml.generate_plantuml_html import redirect_output_to_htmlfrom plantuml.plantuml_types import PlantumlActor, PlantumlComponent, PlantumlInterface, PlantumlPort, PlantumlActivity, PlantumlArchitecture, PlantumlArchView, PlantumlConnection# Exemplo 1 -------------------------------------------------------------------def example_function(x, a=1, *args, **kwargs):    y = x + 10    z = 2 * y    # This is a comment before a    a: Int = 0    print1('text1') # Comment print 1    print('text2')        squares = [x**2 for x in range(10)]    print(squares)        # Comment before if    if x >= 100 and x < 1000: # Comment on if        y = x + 1    elif x < y: # Comment on elif        y = x + 2        return x, y    else: # Comment on else        print1('text3')        print('text4')        y = x - 1        if z > 20 and z <= 30:            print(x)    for i in range(y):        print2(i)    count = 0    while count < 5:# Comment on while        print(f"Count is: {count}")# Comment on print        count += 1    else:        print(f"Count is: {count}")    count = 0    while True:        print(f"Count is: {count}")        count += 1        if count >= 5:            break    return 10    # Exemplo 2 -------------------------------------------------------------------def example_sequence_1():    example_sequence_2(10)    for i in range(10):        example_sequence_2(10)def example_sequence_2(a, **kwargs):    if a > b:        example_sequence_3(10, b=30, c=30)    else:        example_sequence_4()    if a < b:        print("")    else:        print("")    return "OK"def example_sequence_3(b, c):    while b > 0:        example_sequence_4()def example_sequence_4():    return "OK", "Bye"@redirect_output_to_file('output/log1.puml')def case1():    # Example with do_plantuml_activity    do_plantuml_activity(example_function, filter_call=['func1', 'printd1'], args=True, assign=True, augassign=True, ret=True, comment=True)@redirect_output_to_file('output/log2.puml')def case2():    # Example with do_plantuml_sequence    do_plantuml_sequence((example_sequence_1, "Actor 1", "actor"), (example_sequence_2, "Participant 2", "participant"), (example_sequence_3, "DB 1", "database"), (example_sequence_4, "Last", "participant"), max_rec=10, title="This is a title")case1()case2()@dataclassclass MySubComponent1(PlantumlComponent):    activity1 = PlantumlActivity("Mysubactivity 1", note=r"This is a note\nfor an activity")    activity2 = PlantumlActivity("Mysubactivity 2")    def __init__(self, name, **options):        super().__init__(name, **options)        # self.name = name        @dataclassclass MyComponent1(PlantumlComponent):    # interface1 = PlantumlInterface("myinterface 1")    # interface2 = PlantumlInterface("myinterface 2")    activity1 = PlantumlActivity("Myactivity 1")    activity2 = PlantumlActivity("Myactivity 2")# , hide=True)    subcomp = MySubComponent1("SubComponent 1", note=r"This is a note\nfor a component")# , remove=True)    # port1 = PlantumlPort("p1")    # port2 = PlantumlPort("p2")    def __init__(self, name, **options):        super().__init__(name, **options)        # self.name = name@dataclassclass MyComponent2(PlantumlComponent):    #interface1 = PlantumlInterface("myinterface")    activity1 = PlantumlActivity("Myactivity")    def __init__(self, name, **options):        super().__init__(name, **options)        # self.name = "MyComponent2"@dataclassclass MyArchitecture(PlantumlArchitecture):    actor1 = PlantumlActor("Myactor 1")    component1 = MyComponent1("Mycomponent 1")    component2 = MyComponent2("Mycomponent 2", color="pink;line:red;line.bold;text:red")    component3 = PlantumlComponent("Mycomponent 3")    component4 = PlantumlComponent()    component5 = PlantumlComponent()        conn1 = PlantumlConnection("Conn 1", actor1, component1.activity1) # , hide=True)    conn2 = PlantumlConnection("Conn 2", component1.activity1, component2.activity1)    def __init__(self, name):        super().__init__(name)  # Call the __init__ method of PlantumlArchitecture@dataclassclass MyArchView(PlantumlArchView):    def __init__(self, name, architect):        super().__init__(name)  # Call the __init__ method of PlantumlArchView        self.architect = architect# Introspect DerivedClass# introspect_class(MyArchitecture)myarch = MyArchitecture("myarchname")myarcview = MyArchView("myarcview", myarch)# introspect_object(myarcview)#@redirect_output_to_file('output/log3.puml')@redirect_output_to_html('output/output.html', "Architecture test")def case3(myarcview):    # Example with do_plantuml_sequence    do_plantuml_architecture(myarcview)case3(myarcview)